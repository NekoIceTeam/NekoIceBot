/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.nekoiceteam.nekoicebot

import kotlin.time.*
import kotlin.system.*
import dev.minn.jda.ktx.interactions.*
import dev.minn.jda.ktx.*
import kotlinx.coroutines.*
import net.dv8tion.jda.api.*
import net.dv8tion.jda.api.entities.*
import net.dv8tion.jda.api.events.*
import net.dv8tion.jda.api.events.guild.*
import net.dv8tion.jda.api.exceptions.*
import net.dv8tion.jda.api.requests.*
import net.dv8tion.jda.api.utils.*
import java.lang.Integer.max
import java.util.*
import java.util.concurrent.*
import kotlin.concurrent.thread
import kotlin.time.Duration.Companion.minutes

@ExperimentalTime
fun main() {
    val jda = light("TOKEN")
    
    jda.onCommand("ping") { event->
        val time = measureTime {
            event.reply("Pong!").await()
        }.inWholeMilliseconds

        event.hook.editOriginal(":ping_pong: Pong: $time ms").queue()
    }
    jda.updateCommands {
    slash("ban", "Ban a user") {
        option<User>("user", "The user to ban", true)
        option<String>("reason", "Why to ban this user")
        option<Int>("duration", "For how long to ban this user") {
            choice("1 day", 1)
            choice("1 week", 7)
            choice("1 month", 31)
        }
    }

    slash("mod", "Moderation commands") {
        subcommand("ban", "Ban a user") {
            option<User>("user", "The user to ban", true)
            option<String>("reason", "Why to ban this user")
            option<Int>("duration", "For how long to ban this user") {
                choice("1 day", 1)
                choice("1 week", 7)
                choice("1 month", 31)
            }
        }

        subcommand("prune", "Prune messages") {
            option<Int>("amount", "The amount to delete from 2-100, default 50")
        }
    }
}.queue()

jda.upsertCommand("prune", "Prune messages") {
    option<Int>("amount", "The amount to delete from 2-100, default 50")
}.queue()

val menu = SelectMenu("menu:class") {
    option("Frost Mage", "mage-frost", emoji=FROST_SPEC, default=true)
    option("Fire Mage", "mage-fire", emoji=FIRE_SPEC)
    option("Arcane Mage", "mage-arcane", emoji=ARCANE_SPEC)
}
}

